import React, { useState, useEffect } from 'react';
import { 
  Box,
  Button, 
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Typography,
  Divider,
  Alert,
  Snackbar,
  Tabs,
  Tab,
  CircularProgress,
  Chip,
  Grid,
  Card,
  CardContent,
  CardActions,
  MenuItem,
  Select,
  FormControl,
  InputLabel
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import SaveIcon from '@mui/icons-material/Save';
import FolderOpenIcon from '@mui/icons-material/FolderOpen';
import CreateNewFolderIcon from '@mui/icons-material/CreateNewFolder';
import CategoryIcon from '@mui/icons-material/Category';
import fileSystemManager from '../utils/FileSystemManager';
import AddIcon from '@mui/icons-material/Add';
import FolderIcon from '@mui/icons-material/Folder';

const ProjectManager = ({ geometries, materials, onLoadProject }) => {
  // UI state
  const [currentTab, setCurrentTab] = useState(0);
  const [saveDialogOpen, setSaveDialogOpen] = useState(false);
  const [loadDialogOpen, setLoadDialogOpen] = useState(false);
  const [objectDialogOpen, setObjectDialogOpen] = useState(false);
  const [categoryDialogOpen, setCategoryDialogOpen] = useState(false);
  const [initDialogOpen, setInitDialogOpen] = useState(false);
  
  // Data state
  const [projectName, setProjectName] = useState('');
  const [projectDescription, setProjectDescription] = useState('');
  const [savedProjects, setSavedProjects] = useState([]);
  const [savedObjects, setSavedObjects] = useState([]);
  const [categories, setCategories] = useState(['detectors', 'shielding', 'common']);
  const [selectedCategory, setSelectedCategory] = useState('common');
  const [newCategoryName, setNewCategoryName] = useState('');
  const [objectName, setObjectName] = useState('');
  
  // System state
  const [isInitialized, setIsInitialized] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [alert, setAlert] = useState({ open: false, message: '', severity: 'info' });

  // Check if file system is initialized on component mount
  useEffect(() => {
    checkInitialization();
  }, []);

  // Check if the file system manager is initialized
  const checkInitialization = async () => {
    if (fileSystemManager.initialized) {
      setIsInitialized(true);
      loadSavedProjectsList();
      loadCategories();
    } else {
      setIsInitialized(false);
      // Show initialization dialog if not initialized
      setInitDialogOpen(true);
    }
  };

  // Initialize the file system manager
  const initializeFileSystem = async () => {
    setIsLoading(true);
    try {
      const success = await fileSystemManager.initialize();
      if (success) {
        setIsInitialized(true);
        loadSavedProjectsList();
        loadCategories();
        setAlert({
          open: true,
          message: 'File system initialized successfully',
          severity: 'success'
        });
      } else {
        setAlert({
          open: true,
          message: 'Failed to initialize file system',
          severity: 'error'
        });
      }
    } catch (error) {
      console.error('Error initializing file system:', error);
      setAlert({
        open: true,
        message: 'Error initializing file system',
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
      setInitDialogOpen(false);
    }
  };

  // Load the list of saved projects
  const loadSavedProjectsList = async () => {
    if (!isInitialized) return;
    
    setIsLoading(true);
    try {
      const projects = await fileSystemManager.listProjects();
      setSavedProjects(projects);
    } catch (error) {
      console.error('Error loading projects list:', error);
      setAlert({
        open: true,
        message: 'Error loading projects list',
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Load the list of categories
  const loadCategories = async () => {
    if (!isInitialized) return;
    
    setIsLoading(true);
    try {
      const cats = await fileSystemManager.listCategories();
      if (cats.length > 0) {
        setCategories(cats);
      }
      // Load objects for the selected category
      loadObjectsList(selectedCategory);
    } catch (error) {
      console.error('Error loading categories:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Load the list of objects in a category
  const loadObjectsList = async (category) => {
    if (!isInitialized) return;
    
    setIsLoading(true);
    try {
      const objects = await fileSystemManager.listObjects(category);
      setSavedObjects(objects);
    } catch (error) {
      console.error(`Error loading objects in ${category}:`, error);
      setAlert({
        open: true,
        message: `Error loading objects in ${category}`,
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Create a new category
  const createCategory = async () => {
    if (!isInitialized || !newCategoryName.trim()) return;
    
    setIsLoading(true);
    try {
      const success = await fileSystemManager.createCategory(newCategoryName.trim());
      if (success) {
        setAlert({
          open: true,
          message: `Category "${newCategoryName}" created successfully`,
          severity: 'success'
        });
        loadCategories();
        setNewCategoryName('');
        setCategoryDialogOpen(false);
      } else {
        setAlert({
          open: true,
          message: `Failed to create category "${newCategoryName}"`,
          severity: 'error'
        });
      }
    } catch (error) {
      console.error('Error creating category:', error);
      setAlert({
        open: true,
        message: 'Error creating category',
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Save the current project
  const saveProject = async () => {
    if (!isInitialized || !projectName.trim()) {
      setAlert({
        open: true,
        message: 'Please enter a project name',
        severity: 'warning'
      });
      return;
    }

    setIsLoading(true);
    try {
      // Create project data object
      const projectData = {
        geometries,
        materials
      };

      // Create metadata
      const metadata = {
        description: projectDescription,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      // Save project to file system
      const success = await fileSystemManager.saveProject(
        projectName.trim(),
        projectData,
        metadata
      );

      if (success) {
        // Show success message
        setAlert({
          open: true,
          message: `Project "${projectName}" saved successfully`,
          severity: 'success'
        });
        loadSavedProjectsList();
        setSaveDialogOpen(false);
      } else {
        setAlert({
          open: true,
          message: 'Failed to save project',
          severity: 'error'
        });
      }
    } catch (error) {
      console.error('Error saving project:', error);
      setAlert({
        open: true,
        message: 'Error saving project',
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Save the selected object
  const saveObject = async () => {
    if (!isInitialized || !objectName.trim()) {
      setAlert({
        open: true,
        message: 'Please enter an object name',
        severity: 'warning'
      });
      return;
    }

    // Check if we have a selected geometry
    if (!geometries.selectedGeometry) {
      setAlert({
        open: true,
        message: 'Please select an object to save',
        severity: 'warning'
      });
      return;
    }

    setIsLoading(true);
    try {
      // Get the selected geometry
      const selectedId = geometries.selectedGeometry;
      let selectedObject;
      
      if (selectedId === 'world') {
        selectedObject = geometries.world;
      } else if (selectedId.startsWith('volume-')) {
        const index = parseInt(selectedId.replace('volume-', ''));
        selectedObject = geometries.volumes[index];
      } else {
        throw new Error('Invalid selection');
      }

      // Extract the object and its descendants
      const { object, descendants } = extractObjectWithDescendants(selectedObject, geometries);

      // Create the object data
      const objectData = {
        object,
        descendants,
        debug: {
          exportedAt: new Date().toISOString(),
          objectType: object.type,
          objectName: object.name,
          descendantCount: descendants.length
        }
      };

      // Save object to file system
      const success = await fileSystemManager.saveObject(
        objectName.trim(),
        objectData,
        selectedCategory
      );

      if (success) {
        // Show success message
        setAlert({
          open: true,
          message: `Object "${objectName}" saved successfully in ${selectedCategory}`,
          severity: 'success'
        });
        loadObjectsList(selectedCategory);
        setObjectDialogOpen(false);
      } else {
        setAlert({
          open: true,
          message: 'Failed to save object',
          severity: 'error'
        });
      }
    } catch (error) {
      console.error('Error saving object:', error);
      setAlert({
        open: true,
        message: 'Error saving object: ' + error.message,
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Load a project
  const loadProject = async (projectName) => {
    if (!isInitialized) return;
    
    setIsLoading(true);
    try {
      const projectData = await fileSystemManager.loadProject(projectName);
      if (projectData) {
        onLoadProject(projectData.geometry.geometries, projectData.geometry.materials);
        setLoadDialogOpen(false);
        setAlert({
          open: true,
          message: `Project "${projectName}" loaded successfully`,
          severity: 'success'
        });
      } else {
        setAlert({
          open: true,
          message: `Failed to load project "${projectName}"`,
          severity: 'error'
        });
      }
    } catch (error) {
      console.error('Error loading project:', error);
      setAlert({
        open: true,
        message: 'Error loading project',
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Load an object
  const loadObject = async (objectName, category) => {
    if (!isInitialized) return;
    
    setIsLoading(true);
    try {
      const objectData = await fileSystemManager.loadObject(objectName, category);
      if (objectData) {
        // Use the existing import function
        // This should be defined elsewhere in your application
        if (typeof handleImportPartialFromAddNew === 'function') {
          handleImportPartialFromAddNew(objectData, 'World');
          setAlert({
            open: true,
            message: `Object "${objectName}" loaded successfully`,
            severity: 'success'
          });
        } else {
          setAlert({
            open: true,
            message: 'Import function not available',
            severity: 'error'
          });
        }
      } else {
        setAlert({
          open: true,
          message: `Failed to load object "${objectName}"`,
          severity: 'error'
        });
      }
    } catch (error) {
      console.error('Error loading object:', error);
      setAlert({
        open: true,
        message: 'Error loading object',
        severity: 'error'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Format date for display
  const formatDate = (isoString) => {
    try {
      const date = new Date(isoString);
      return date.toLocaleString();
    } catch (e) {
      return 'Unknown date';
    }
  };

  // Handle alert close
  const handleAlertClose = () => {
    setAlert({ ...alert, open: false });
  };

  // Extract object with descendants function
  // This should be defined elsewhere in your application
  // This is a placeholder implementation
  const extractObjectWithDescendants = (mainObject, geometries) => {
    // Get all descendants
    const allDescendants = [];
    const isWorld = mainObject.name === geometries.world.name;
    
    // Find all volumes that have this object as mother_volume
    geometries.volumes.forEach(volume => {
      if (volume.mother_volume === mainObject.name) {
        allDescendants.push({ ...volume });
      }
    });
    
    // Return the main object and all its descendants
    return {
      object: { ...mainObject },
      descendants: allDescendants,
      isWorld
    };
  };
        <Button 
          onClick={initializeFileSystem} 
          variant="contained"
          disabled={isLoading}
          startIcon={isLoading ? <CircularProgress size={20} /> : <FolderIcon />}
        >
          Select Directory
        </Button>
      </DialogActions>
    </Dialog>

    {/* Main UI */}
    <Box sx={{ width: '100%' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
        <Tabs value={currentTab} onChange={(e, newValue) => setCurrentTab(newValue)}>
          <Tab label="Projects" />
          <Tab label="Objects" />
        </Tabs>
      </Box>

      {/* Projects Tab */}
      {currentTab === 0 && (
        <Box>
          <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
            <Button 
              variant="contained" 
              color="primary"
              startIcon={<SaveIcon />}
              onClick={() => {
                if (!isInitialized) {
                  setInitDialogOpen(true);
                  return;
                }
                loadSavedProjectsList();
                setSaveDialogOpen(true);
              }}
              size="small"
            >
              Save Project
            </Button>
            <Button 
              variant="contained" 
              color="secondary"
              startIcon={<FolderOpenIcon />}
              onClick={() => {
                if (!isInitialized) {
                  setInitDialogOpen(true);
                  return;
                }
                loadSavedProjectsList();
                setLoadDialogOpen(true);
              }}
              size="small"
            >
              Load Project
            </Button>
          </Box>

          {!isInitialized && (
            <Alert severity="info" sx={{ mb: 2 }}>
              Please initialize the storage system first by clicking the button below.
              <Button 
                variant="outlined" 
                size="small" 
                onClick={() => setInitDialogOpen(true)}
                sx={{ ml: 2 }}
              >
                Initialize Storage
              </Button>
            </Alert>
          )}

          {isInitialized && savedProjects.length > 0 && (
            <Box sx={{ mt: 2 }}>
              <Typography variant="h6">Recent Projects</Typography>
              <Grid container spacing={2} sx={{ mt: 1 }}>
                {savedProjects.slice(0, 3).map((project) => (
                  <Grid item xs={12} sm={6} md={4} key={project.name}>
                    <Card>
                      <CardContent>
                        <Typography variant="h6" component="div">
                          {project.name}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          {project.description || 'No description'}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          Last modified: {formatDate(project.updatedAt || project.createdAt)}
                        </Typography>
                      </CardContent>
                      <CardActions>
                        <Button size="small" onClick={() => loadProject(project.name)}>Load</Button>
                      </CardActions>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Box>
          )}
        </Box>
      )}

      {/* Objects Tab */}
      {currentTab === 1 && (
        <Box>
          <Box sx={{ display: 'flex', gap: 1, mb: 2, alignItems: 'center' }}>
            <Button 
              variant="contained" 
              color="primary"
              startIcon={<SaveIcon />}
              onClick={() => {
                if (!isInitialized) {
                  setInitDialogOpen(true);
                  return;
                }
                setObjectName('');
                setObjectDialogOpen(true);
              }}
              size="small"
            >
              Save Object
            </Button>
            <Button 
              variant="outlined"
              startIcon={<CategoryIcon />}
              onClick={() => {
                if (!isInitialized) {
                  setInitDialogOpen(true);
                  return;
                }
                setNewCategoryName('');
                setCategoryDialogOpen(true);
              }}
              size="small"
            >
              New Category
            </Button>
            
            <FormControl variant="outlined" size="small" sx={{ minWidth: 120, ml: 'auto' }}>
              <InputLabel>Category</InputLabel>
              <Select
                value={selectedCategory}
                onChange={(e) => {
                  setSelectedCategory(e.target.value);
                  loadObjectsList(e.target.value);
                }}
                label="Category"
              >
                {categories.map((cat) => (
                  <MenuItem key={cat} value={cat}>{cat}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>

          {!isInitialized && (
            <Alert severity="info" sx={{ mb: 2 }}>
              Please initialize the storage system first.
            </Alert>
          )}

          {isInitialized && (
            <Box sx={{ mt: 2 }}>
              <Typography variant="h6">Objects in {selectedCategory}</Typography>
              {savedObjects.length === 0 ? (
                <Typography variant="body2" sx={{ mt: 1 }}>
                  No objects found in this category.
                </Typography>
              ) : (
                <Grid container spacing={2} sx={{ mt: 1 }}>
                  {savedObjects.map((objectName) => (
                    <Grid item xs={12} sm={6} md={4} key={objectName}>
                      <Card>
                        <CardContent>
                          <Typography variant="h6" component="div">
                            {objectName}
                          </Typography>
                          <Chip 
                            label={selectedCategory} 
                            size="small" 
                            sx={{ mt: 1 }}
                          />
                        </CardContent>
                        <CardActions>
                          <Button 
                            size="small" 
                            onClick={() => loadObject(objectName, selectedCategory)}
                          >
                            Import
                          </Button>
                        </CardActions>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              )}
            </Box>
          )}
        </Box>
      )}
    </Box>

    {/* Save Project Dialog */}
    <Dialog 
      open={saveDialogOpen} 
      onClose={() => setSaveDialogOpen(false)}
      maxWidth="sm"
      fullWidth
    >
      <DialogTitle>Save Project</DialogTitle>
      <DialogContent>
        <TextField
          autoFocus
          margin="dense"
          label="Project Name"
          type="text"
          fullWidth
          value={projectName}
          onChange={(e) => setProjectName(e.target.value)}
        />
        <TextField
          margin="dense"
          label="Description (optional)"
          type="text"
          fullWidth
          multiline
          rows={2}
          value={projectDescription}
          onChange={(e) => setProjectDescription(e.target.value)}
        />
        {savedProjects.length > 0 && (
          <>
            <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
              Existing Projects:
            </Typography>
            <List dense sx={{ maxHeight: 200, overflow: 'auto' }}>
              {savedProjects.map((project) => (
                <ListItem 
                  key={project.name} 
                  button 
                  onClick={() => {
                    setProjectName(project.name);
                    setProjectDescription(project.description || '');
                  }}
                >
                  <ListItemText 
                    primary={project.name} 
                    secondary={formatDate(project.updatedAt || project.createdAt)}
                  />
                </ListItem>
              ))}
            </List>
            <Typography variant="caption" color="text.secondary">
              Note: Saving with an existing name will overwrite that project
            </Typography>
          </>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={() => setSaveDialogOpen(false)}>Cancel</Button>
        <Button 
          onClick={saveProject} 
          variant="contained"
          disabled={isLoading}
          startIcon={isLoading ? <CircularProgress size={20} /> : null}
        >
          Save
        </Button>
      </DialogActions>
    </Dialog>
    </>
  );
};

export default ProjectManager;
